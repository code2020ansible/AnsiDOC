---
- hosts: localhost
  gather_facts: false
  vars_files:
    - ../answerfile.yml
  tasks:

    - name: Create Ruby script for silencing vSAN warnings
      template: 
        src=../templates/vsan_silence.rb
        dest=/tmp/vsan_silence_{{ item.key }}
      when: item.value.vsan == true
      with_dict: "{{ clusters }}"

    - name: Copy Ruby script to vCenter
      vmware_guest_file_operation:
        hostname: "{{ physicalESX.fqdn }}"
        username: "{{ physicalESX.user }}"
        password: "{{ physicalESX.password }}"
        validate_certs: no
        vm_id: "{{ vcenter.vmname }}"
        vm_username: "root"
        vm_password: "{{ vcenter.password }}"
        copy:
            src: "/tmp/vsan_silence_{{ item.key }}"
            dest: "/tmp/vsan_silence_{{ item.key }}"
            overwrite: true
      when: item.value.vsan == true
      with_dict: "{{ clusters }}"
        
    - name: Run Ruby script
      vmware_vm_shell:
        hostname: "{{ physicalESX.fqdn }}"
        username: "{{ physicalESX.user }}"
        password: "{{ physicalESX.password }}"
        validate_certs: false
        vm_id: "{{ vcenter.vmname }}"
        vm_username: "root"
        vm_password: "{{ vcenter.password }}"
        vm_shell: /usr/bin/rvc
        vm_shell_args: '{{ vcenter.user }}:VMware1\!@{{ vcenter.fqdn }} -s /tmp/vsan_silence_{{ item.key }}'
      when: item.value.vsan == true
      with_dict: "{{ clusters }}"

    - name: Delete the temporary Ruby script
      file: path=/tmp/vsan_silence.rb state=absent
      when: 
        - item.value.vsan == true
        - DEBUG_keep_config_files != true
      with_dict: "{{ clusters }}"

    - name: Enable vSAN
      enable_vsan:
        vcenter: "{{ vcenter.ip }}"
        user: "{{ vcenter.user }}"
        passwd: "{{ vcenter.password }}"
        cluster: "{{ item.key }}"
      when: item.value.vsan == True
      with_dict: "{{ clusters }}"

    - name: Claim disks for vSAN
      claim_vsan_disks:
        vcenter: "{{ vcenter.ip }}"
        user: "{{ vcenter.user }}"
        passwd: "{{ vcenter.password }}"
        cluster: "{{ item.key }}"
      when: item.value.vsan == True
      ignore_errors: true
      with_dict: "{{ clusters }}"